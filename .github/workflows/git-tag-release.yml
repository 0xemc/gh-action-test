name: Release
on:
  push:
    branches:
      - main
    paths:
      - "package.json"
    # Pattern matched against refs/tags
    tags:
      - "some-prefix/*"
jobs:
  release-carbonmark-api:
    # block actions initiated by this or other workflows
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get install jq

      - name: Set RELEASE_VERSION from tag or package.json
        run: |
          if [[ "${GITHUB_REF#refs/tags/some-prefix/}" != "$GITHUB_REF" ]]; then
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/some-prefix/}" >> $GITHUB_ENV
          else
            VERSION_CHANGED=$(git diff HEAD^ HEAD -- package.json | grep '"version":')
            if [[ -z "$VERSION_CHANGED" ]]; then
              echo "Version in package.json has not changed. Exiting."
              exit 1
            fi
            version=v$(jq -r .version package.json)
            echo "RELEASE_VERSION=$version" >> $GITHUB_ENV
          fi

      - name: Create tag if none exists
        if: startsWith(github.ref, 'refs/heads/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "0xemc@protonmail.com"
          git config --global user.name "emc"
          git tag "some-prefix/${{ env.RELEASE_VERSION }}"
          git push origin "some-prefix/${{ env.RELEASE_VERSION }}"

      - name: Debug RELEASE_VERSION
        run: echo $RELEASE_VERSION

      - name: Debug git
        run: |
          echo "Current branch:"
          git rev-parse --abbrev-ref HEAD
          echo "All tags:"
          git tag

      - name: Get previous tag
        id: previousTag
        run: |
          name=$(git --no-pager tag --sort=creatordate --merged ${{ github.ref_name }} | grep '^some-prefix/' | tail -2 | head -1)
          echo "previousTag: $name"
          debug_output=$(git --no-pager tag --sort=creatordate --merged some-prefix/v1.0.2 | grep '^some-prefix/')
          echo "Debug output: $debug_output"
          echo "previousTag=$name" >> $GITHUB_ENV

      - name: Generate changelog
        id: release_notes
        run: |
          RELEASE_NOTES=$(git log ${{ env.previousTag }}..${{ github.ref_name }} --pretty=format:"- %s (%an, %cd)" -- carbonmark-api)
          # All of this rubbish below is to remove new line characters so that GH doesn't try to execute our release log
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ env.RELEASE_VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          draft: true
          prerelease: false
